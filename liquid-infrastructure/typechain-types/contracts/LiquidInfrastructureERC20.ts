/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LiquidInfrastructureERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "HolderAllowlist"
      | "LastDistribution"
      | "LockedForDistribution"
      | "ManagedNFTs"
      | "MinDistributionPeriod"
      | "Version"
      | "addManagedNFT"
      | "allowance"
      | "approve"
      | "approveHolder"
      | "balanceOf"
      | "burn"
      | "burnAndDistribute"
      | "burnFrom"
      | "burnFromAndDistribute"
      | "decimals"
      | "decreaseAllowance"
      | "disapproveHolder"
      | "distribute"
      | "distributeToAllHolders"
      | "increaseAllowance"
      | "isApprovedHolder"
      | "mint"
      | "mintAndDistribute"
      | "name"
      | "onERC721Received"
      | "owner"
      | "releaseManagedNFT"
      | "renounceOwnership"
      | "setDistributableERC20s"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdrawFromAllManagedNFTs"
      | "withdrawFromManagedNFTs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddManagedNFT"
      | "Approval"
      | "Deployed"
      | "Distribution"
      | "DistributionFinished"
      | "DistributionStarted"
      | "OwnershipTransferred"
      | "ReleaseManagedNFT"
      | "Transfer"
      | "Withdrawal"
      | "WithdrawalFinished"
      | "WithdrawalStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HolderAllowlist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "LastDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LockedForDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ManagedNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MinDistributionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addManagedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnAndDistribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFromAndDistribute",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeToAllHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndDistribute",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseManagedNFT",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributableERC20s",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromAllManagedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromManagedNFTs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "HolderAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LastDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LockedForDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ManagedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MinDistributionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addManagedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFromAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disapproveHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeToAllHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseManagedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributableERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromAllManagedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromManagedNFTs",
    data: BytesLike
  ): Result;
}

export namespace AddManagedNFTEvent {
  export type InputTuple = [nft: AddressLike];
  export type OutputTuple = [nft: string];
  export interface OutputObject {
    nft: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionEvent {
  export type InputTuple = [
    recipient: AddressLike,
    tokens: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    recipient: string,
    tokens: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    recipient: string;
    tokens: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionFinishedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleaseManagedNFTEvent {
  export type InputTuple = [nft: AddressLike, to: AddressLike];
  export type OutputTuple = [nft: string, to: string];
  export interface OutputObject {
    nft: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [source: AddressLike];
  export type OutputTuple = [source: string];
  export interface OutputObject {
    source: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFinishedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidInfrastructureERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidInfrastructureERC20;
  waitForDeployment(): Promise<this>;

  interface: LiquidInfrastructureERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HolderAllowlist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  LastDistribution: TypedContractMethod<[], [bigint], "view">;

  LockedForDistribution: TypedContractMethod<[], [boolean], "view">;

  ManagedNFTs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  MinDistributionPeriod: TypedContractMethod<[], [bigint], "view">;

  Version: TypedContractMethod<[], [bigint], "view">;

  addManagedNFT: TypedContractMethod<
    [nftContract: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveHolder: TypedContractMethod<
    [holder: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnAndDistribute: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnFromAndDistribute: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  disapproveHolder: TypedContractMethod<
    [holder: AddressLike],
    [void],
    "nonpayable"
  >;

  distribute: TypedContractMethod<
    [numDistributions: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeToAllHolders: TypedContractMethod<[], [void], "nonpayable">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isApprovedHolder: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintAndDistribute: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releaseManagedNFT: TypedContractMethod<
    [nftContract: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDistributableERC20s: TypedContractMethod<
    [_distributableERC20s: AddressLike[]],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFromAllManagedNFTs: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFromManagedNFTs: TypedContractMethod<
    [numWithdrawals: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HolderAllowlist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "LastDistribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LockedForDistribution"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "ManagedNFTs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "MinDistributionPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addManagedNFT"
  ): TypedContractMethod<[nftContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveHolder"
  ): TypedContractMethod<[holder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnAndDistribute"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnFromAndDistribute"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disapproveHolder"
  ): TypedContractMethod<[holder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [numDistributions: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeToAllHolders"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedHolder"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintAndDistribute"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseManagedNFT"
  ): TypedContractMethod<
    [nftContract: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDistributableERC20s"
  ): TypedContractMethod<
    [_distributableERC20s: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFromAllManagedNFTs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFromManagedNFTs"
  ): TypedContractMethod<[numWithdrawals: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AddManagedNFT"
  ): TypedContractEvent<
    AddManagedNFTEvent.InputTuple,
    AddManagedNFTEvent.OutputTuple,
    AddManagedNFTEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deployed"
  ): TypedContractEvent<
    DeployedEvent.InputTuple,
    DeployedEvent.OutputTuple,
    DeployedEvent.OutputObject
  >;
  getEvent(
    key: "Distribution"
  ): TypedContractEvent<
    DistributionEvent.InputTuple,
    DistributionEvent.OutputTuple,
    DistributionEvent.OutputObject
  >;
  getEvent(
    key: "DistributionFinished"
  ): TypedContractEvent<
    DistributionFinishedEvent.InputTuple,
    DistributionFinishedEvent.OutputTuple,
    DistributionFinishedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionStarted"
  ): TypedContractEvent<
    DistributionStartedEvent.InputTuple,
    DistributionStartedEvent.OutputTuple,
    DistributionStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReleaseManagedNFT"
  ): TypedContractEvent<
    ReleaseManagedNFTEvent.InputTuple,
    ReleaseManagedNFTEvent.OutputTuple,
    ReleaseManagedNFTEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalFinished"
  ): TypedContractEvent<
    WithdrawalFinishedEvent.InputTuple,
    WithdrawalFinishedEvent.OutputTuple,
    WithdrawalFinishedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalStarted"
  ): TypedContractEvent<
    WithdrawalStartedEvent.InputTuple,
    WithdrawalStartedEvent.OutputTuple,
    WithdrawalStartedEvent.OutputObject
  >;

  filters: {
    "AddManagedNFT(address)": TypedContractEvent<
      AddManagedNFTEvent.InputTuple,
      AddManagedNFTEvent.OutputTuple,
      AddManagedNFTEvent.OutputObject
    >;
    AddManagedNFT: TypedContractEvent<
      AddManagedNFTEvent.InputTuple,
      AddManagedNFTEvent.OutputTuple,
      AddManagedNFTEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deployed()": TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;
    Deployed: TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;

    "Distribution(address,address[],uint256[])": TypedContractEvent<
      DistributionEvent.InputTuple,
      DistributionEvent.OutputTuple,
      DistributionEvent.OutputObject
    >;
    Distribution: TypedContractEvent<
      DistributionEvent.InputTuple,
      DistributionEvent.OutputTuple,
      DistributionEvent.OutputObject
    >;

    "DistributionFinished()": TypedContractEvent<
      DistributionFinishedEvent.InputTuple,
      DistributionFinishedEvent.OutputTuple,
      DistributionFinishedEvent.OutputObject
    >;
    DistributionFinished: TypedContractEvent<
      DistributionFinishedEvent.InputTuple,
      DistributionFinishedEvent.OutputTuple,
      DistributionFinishedEvent.OutputObject
    >;

    "DistributionStarted()": TypedContractEvent<
      DistributionStartedEvent.InputTuple,
      DistributionStartedEvent.OutputTuple,
      DistributionStartedEvent.OutputObject
    >;
    DistributionStarted: TypedContractEvent<
      DistributionStartedEvent.InputTuple,
      DistributionStartedEvent.OutputTuple,
      DistributionStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReleaseManagedNFT(address,address)": TypedContractEvent<
      ReleaseManagedNFTEvent.InputTuple,
      ReleaseManagedNFTEvent.OutputTuple,
      ReleaseManagedNFTEvent.OutputObject
    >;
    ReleaseManagedNFT: TypedContractEvent<
      ReleaseManagedNFTEvent.InputTuple,
      ReleaseManagedNFTEvent.OutputTuple,
      ReleaseManagedNFTEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawal(address)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "WithdrawalFinished()": TypedContractEvent<
      WithdrawalFinishedEvent.InputTuple,
      WithdrawalFinishedEvent.OutputTuple,
      WithdrawalFinishedEvent.OutputObject
    >;
    WithdrawalFinished: TypedContractEvent<
      WithdrawalFinishedEvent.InputTuple,
      WithdrawalFinishedEvent.OutputTuple,
      WithdrawalFinishedEvent.OutputObject
    >;

    "WithdrawalStarted()": TypedContractEvent<
      WithdrawalStartedEvent.InputTuple,
      WithdrawalStartedEvent.OutputTuple,
      WithdrawalStartedEvent.OutputObject
    >;
    WithdrawalStarted: TypedContractEvent<
      WithdrawalStartedEvent.InputTuple,
      WithdrawalStartedEvent.OutputTuple,
      WithdrawalStartedEvent.OutputObject
    >;
  };
}
